import requests
import pandas as pd
import json
import matplotlib.pyplot as plt
import seaborn as sns

url = 'https://api.openweathermap.org/data/2.5/forecast?lat=44.34&lon=10.99&appid=307d11bca480dd730d99187c926' # <-- This is app id also known as api key, which you have to generate your own, and paste it here

#vurl ='https://api.openweathermap.org/data/2.5/weather?lat=44.34&lon=10.99&appid=307d11bca480dd730d99187c926&city_name=London'

response = requests.get(url)
data = response.json()
pretty_json = json.dumps(data,indent=4)
print(pretty_json)

date_time = data['list'][0]['dt_txt']
date_time


# 3.Extract relevant weather attributes such as temperature, humidity, wind speed, and  precipitation from the API response
data_struct = []
for record in data['list']:
    temp = record['main']['temp']
    humid = record['main']['humidity']
    wind_speed = record['wind']['speed']
    desp =record['weather'][0]['description']
    date_time = record['dt_txt']
    data_struct.append({'Temperature':temp,'Humidity':humid,'Wind Speed':wind_speed,'Weather Description':desp,'Date Time':date_time})

data_df = pd.DataFrame(data_struct)
data_df[['Date','Time']] = data_df['Date Time'].str.split(' ',expand=True)
data_df.head()

data_df.shape


# 4.Clean and preprocess the retrieved data, handling missing values or inconsistent  formats.
data_df.isnull().sum()

data_df.info()

# 5.Perform data modeling to analyze weather patterns, such as calculating average temperature, maximum/minimum values, or trends over time.
data_df.describe()


# 6.Visualize the weather data using appropriate plots, such as line charts, bar plots, or scatter plots, to represent temperature changes, precipitation levels, or wind speed variations.
import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(10,5))
sns.scatterplot(x=data_df['Date Time'],
                y=data_df['Temperature'],
                hue=data_df['Weather Description'])

plt.xticks(rotation=90);

plt.figure(figsize=(10,5))
plt.plot(data_df['Date Time'],data_df['Temperature'])
plt.xticks(rotation=90);

# 7.Apply data aggregation techniques to summarize weather statistics by specific time periods                        
data_df.groupby('Date').agg({'Temperature' : 'mean','Wind Speed':'mean'})

data_df.columns

# 9.Explore and visualize relationships between weather attributes, such as temperature and humidity, using correlation plots or heatmaps.
sns.heatmap(data_df[['Temperature','Humidity','Wind Speed']].corr(),annot=True,cmap='crest')
