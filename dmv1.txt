import pandas as pd,json
dcsv = pd.read_csv('customers.csv')
djson = pd.read_json('customers.json')
dxlsx = pd.read_excel('customers.xlsx')


# 2. Explore the structure and content of the loaded data, identifying any inconsistencies, missing values, or data quality issues.
dcsv.head()

djson.head()

dxlsx.head()

print(f"Missing values in csv\n{dcsv.isna().sum()}")
print(f"\nMissing values in json\n{djson.isna().sum()}")
print(f"\nMissing values in xlsx\n{dxlsx.isna().sum()}")

print(f"info of csv")
dcsv.info()
print(f"\ninfo of json")
djson.info()
print(f"\ninfo of xlsx")
dxlsx.info()


# 3. Perform data cleaning operations, such as handling missing values, removing duplicates, or correcting inconsistencies.
dcsv.fillna(0,inplace=True)
djson.fillna(0,inplace=True)
dxlsx.fillna(0,inplace=True)

dcsv[dcsv.duplicated()]

djson[djson.duplicated()]

dxlsx[dxlsx.duplicated()]

dcsv.drop_duplicates(inplace=True)
djson.drop_duplicates(inplace=True)
dxlsx.drop_duplicates(inplace=True)


# 4. Convert the data into a unified format, such as a common dataframe or data structure, to enable seamless analysis.
uni_df = pd.concat([dcsv,djson,dxlsx],ignore_index=True)
uni_df.shape


# 5. Perform data transformation tasks, such as merging multiple datasets, splitting columns, or deriving new variables.
dcsv['full name'] = dcsv['first_name'] + ' ' + dcsv['last_name']

dcsv.head()

def extract_pin_code(address):
    match = re.search(r'\b\d{5}\b', address)
    return match
dcsv['pin code'] = [extract_pin_code(add)[0] for add in dcsv['address']]

dcsv.head()


# 6. Analyze the sales data by performing descriptive statistics, aggregating data by specific variables, or calculating metrics such as total sales, average order value, or product category distribution.
uni_df.describe()

uni_df.groupby('job').agg({'orders':'sum',
                          'spent':'mean'})

uni_df['spent'].sum() #calc total sales

uni_df['spent'].mean()

uni_df['job'].value_counts()


# 7. Create visualizations, such as bar plots, pie charts, or box plots, to represent the sales data and gain insights into sales trends, customer behavior, or product performance.
import seaborn as sns
import matplotlib.pyplot as plt

sns.barplot(x='job', y='spent', data=uni_df)
plt.title('Sales by Product Category')
plt.xlabel('Product Category')
plt.ylabel('Total Sales')
plt.xticks(rotation=90)
plt.show()

# Create a pie chart to represent the distribution of product categories
product_distribution = uni_df['job'].value_counts()
plt.pie(product_distribution, labels=product_distribution.index, autopct='%1.2f%%', startangle=140)
plt.title('job Category Distribution')
plt.xticks(rotation=90)
plt.show()

# Create a box plot to visualize the distribution of order values
sns.boxplot(x='job', y='spent', data=uni_df)
plt.title('Order Value Distribution by Job')
plt.xlabel('Job')
plt.ylabel('Order Value')
plt.xticks(rotation=90)
plt.show()
